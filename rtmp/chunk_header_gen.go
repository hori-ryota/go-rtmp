// Automatically generated by go generate; DO NOT EDIT.

package rtmp

import (
	"encoding"

	"github.com/pkg/errors"
	"go.uber.org/zap/zapcore"
)

type ChunkHeader interface {
	encoding.BinaryMarshaler
	zapcore.ObjectMarshaler
	BasicHeader() ChunkBasicHeader
	MessageHeader() ChunkMessageHeader
	ExtendedTimestamp() uint32
	Timestamp() uint32
	TimestampDelta() uint32
}

type chunkHeader struct {
	basicHeader       ChunkBasicHeader
	messageHeader     ChunkMessageHeader
	extendedTimestamp uint32
}

func NewChunkHeader(
	basicHeader ChunkBasicHeader,
	messageHeader ChunkMessageHeader,
	extendedTimestamp uint32,
) ChunkHeader {
	return &chunkHeader{
		basicHeader:       basicHeader,
		messageHeader:     messageHeader,
		extendedTimestamp: extendedTimestamp,
	}
}

func (m chunkHeader) BasicHeader() ChunkBasicHeader {
	return m.basicHeader
}
func (m chunkHeader) MessageHeader() ChunkMessageHeader {
	return m.messageHeader
}
func (m chunkHeader) ExtendedTimestamp() uint32 {
	return m.extendedTimestamp
}

func (m chunkHeader) MarshalLogObject(enc zapcore.ObjectEncoder) error {
	if err := enc.AddObject("basicHeader", m.BasicHeader()); err != nil {
		return errors.Wrap(err, "failed to AddObject basicHeader")
	}
	if err := enc.AddObject("messageHeader", m.MessageHeader()); err != nil {
		return errors.Wrap(err, "failed to AddObject messageHeader")
	}
	enc.AddUint32("extendedTimestamp", m.ExtendedTimestamp())
	return nil
}
